//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""40274b66-c32a-4092-81ce-a8001c708fb1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6febe845-b201-48a9-8cd2-5385ab9fef56"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterBuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""3761002b-740f-4597-a6c6-dbcb761abdf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9ebb7c22-2a2d-408e-af28-e7af3d05fedc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""36b60082-60da-4ef7-9fa6-c9b387d4af94"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d4036b23-c12c-4f8a-a9fe-c7a9b3a6a7b2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""07b9c045-6bc7-483c-9a59-6f724cec8fc5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""254736f5-6902-44d7-857f-97425edea441"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""393b1e9d-9131-4f09-b113-411d0f6d5941"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterBuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buider"",
            ""id"": ""18aa8c0a-820c-4a9d-bef4-2dd5b1c29019"",
            ""actions"": [
                {
                    ""name"": ""Build"",
                    ""type"": ""Button"",
                    ""id"": ""e98a2018-e299-424f-abdd-3b2ba7e0ed35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Button"",
                    ""id"": ""7fb9d672-4a1c-47b9-82f9-904f8c977c37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""32faee2b-fb14-4b61-b697-ca0f441cde77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Button"",
                    ""id"": ""2c5fd3e1-99d3-4f9f-8d11-8afb5712eb16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitBuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""f3e47b9a-6cf6-4e53-9bf1-89b32b5fa625"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""660e7903-3993-4fe6-9c2d-fa8095339acf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d381b47f-1c7a-4b97-ad95-1fc153073ab8"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4b1ccb0-5171-482f-8b4e-76267972f7e6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""644395c8-da27-4072-b3ac-08a43190db88"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a46d7310-8212-487f-b128-36ea25745f76"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitBuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_EnterBuildMode = m_Player.FindAction("EnterBuildMode", throwIfNotFound: true);
        // Buider
        m_Buider = asset.FindActionMap("Buider", throwIfNotFound: true);
        m_Buider_Build = m_Buider.FindAction("Build", throwIfNotFound: true);
        m_Buider_Scale = m_Buider.FindAction("Scale", throwIfNotFound: true);
        m_Buider_Reset = m_Buider.FindAction("Reset", throwIfNotFound: true);
        m_Buider_Scroll = m_Buider.FindAction("Scroll", throwIfNotFound: true);
        m_Buider_ExitBuildMode = m_Buider.FindAction("ExitBuildMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_EnterBuildMode;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @EnterBuildMode => m_Wrapper.m_Player_EnterBuildMode;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @EnterBuildMode.started += instance.OnEnterBuildMode;
            @EnterBuildMode.performed += instance.OnEnterBuildMode;
            @EnterBuildMode.canceled += instance.OnEnterBuildMode;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @EnterBuildMode.started -= instance.OnEnterBuildMode;
            @EnterBuildMode.performed -= instance.OnEnterBuildMode;
            @EnterBuildMode.canceled -= instance.OnEnterBuildMode;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Buider
    private readonly InputActionMap m_Buider;
    private List<IBuiderActions> m_BuiderActionsCallbackInterfaces = new List<IBuiderActions>();
    private readonly InputAction m_Buider_Build;
    private readonly InputAction m_Buider_Scale;
    private readonly InputAction m_Buider_Reset;
    private readonly InputAction m_Buider_Scroll;
    private readonly InputAction m_Buider_ExitBuildMode;
    public struct BuiderActions
    {
        private @PlayerInputActions m_Wrapper;
        public BuiderActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Build => m_Wrapper.m_Buider_Build;
        public InputAction @Scale => m_Wrapper.m_Buider_Scale;
        public InputAction @Reset => m_Wrapper.m_Buider_Reset;
        public InputAction @Scroll => m_Wrapper.m_Buider_Scroll;
        public InputAction @ExitBuildMode => m_Wrapper.m_Buider_ExitBuildMode;
        public InputActionMap Get() { return m_Wrapper.m_Buider; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuiderActions set) { return set.Get(); }
        public void AddCallbacks(IBuiderActions instance)
        {
            if (instance == null || m_Wrapper.m_BuiderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuiderActionsCallbackInterfaces.Add(instance);
            @Build.started += instance.OnBuild;
            @Build.performed += instance.OnBuild;
            @Build.canceled += instance.OnBuild;
            @Scale.started += instance.OnScale;
            @Scale.performed += instance.OnScale;
            @Scale.canceled += instance.OnScale;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @ExitBuildMode.started += instance.OnExitBuildMode;
            @ExitBuildMode.performed += instance.OnExitBuildMode;
            @ExitBuildMode.canceled += instance.OnExitBuildMode;
        }

        private void UnregisterCallbacks(IBuiderActions instance)
        {
            @Build.started -= instance.OnBuild;
            @Build.performed -= instance.OnBuild;
            @Build.canceled -= instance.OnBuild;
            @Scale.started -= instance.OnScale;
            @Scale.performed -= instance.OnScale;
            @Scale.canceled -= instance.OnScale;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @ExitBuildMode.started -= instance.OnExitBuildMode;
            @ExitBuildMode.performed -= instance.OnExitBuildMode;
            @ExitBuildMode.canceled -= instance.OnExitBuildMode;
        }

        public void RemoveCallbacks(IBuiderActions instance)
        {
            if (m_Wrapper.m_BuiderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuiderActions instance)
        {
            foreach (var item in m_Wrapper.m_BuiderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuiderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuiderActions @Buider => new BuiderActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnEnterBuildMode(InputAction.CallbackContext context);
    }
    public interface IBuiderActions
    {
        void OnBuild(InputAction.CallbackContext context);
        void OnScale(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnExitBuildMode(InputAction.CallbackContext context);
    }
}
